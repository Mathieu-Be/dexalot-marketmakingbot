/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestPriceFeed,
  TestPriceFeedInterface,
} from "../../../contracts/test/TestPriceFeed";

const _abi = [
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610407806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063313ce5671461005c57806354fd4d501461007a5780637284e416146100985780639a6fc8f5146100b6578063feaf968c146100ea575b600080fd5b61006461010c565b60405161007191906101d8565b60405180910390f35b610082610115565b60405161008f919061020c565b60405180910390f35b6100a061011e565b6040516100ad91906102c0565b60405180910390f35b6100d060048036038101906100cb9190610329565b61015b565b6040516100e195949392919061037e565b60405180910390f35b6100f2610191565b60405161010395949392919061037e565b60405180910390f35b60006012905090565b60006001905090565b60606040518060400160405280600f81526020017f5072696365204665656420546573740000000000000000000000000000000000815250905090565b60008060008060008594506401bf4708a59350636224f5c19250636224f5c191506802000000000000cef8905091939590929450565b60008060008060006101ab6802000000000000cef861015b565b945094509450945094509091929394565b600060ff82169050919050565b6101d2816101bc565b82525050565b60006020820190506101ed60008301846101c9565b92915050565b6000819050919050565b610206816101f3565b82525050565b600060208201905061022160008301846101fd565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610261578082015181840152602081019050610246565b83811115610270576000848401525b50505050565b6000601f19601f8301169050919050565b600061029282610227565b61029c8185610232565b93506102ac818560208601610243565b6102b581610276565b840191505092915050565b600060208201905081810360008301526102da8184610287565b905092915050565b600080fd5b600069ffffffffffffffffffff82169050919050565b610306816102e7565b811461031157600080fd5b50565b600081359050610323816102fd565b92915050565b60006020828403121561033f5761033e6102e2565b5b600061034d84828501610314565b91505092915050565b61035f816102e7565b82525050565b6000819050919050565b61037881610365565b82525050565b600060a0820190506103936000830188610356565b6103a0602083018761036f565b6103ad60408301866101fd565b6103ba60608301856101fd565b6103c76080830184610356565b969550505050505056fea26469706673582212206202697978e50a56123947ac99021c9a177e5d5c88892812340b22f42d13dc6164736f6c63430008090033";

type TestPriceFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestPriceFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestPriceFeed__factory extends ContractFactory {
  constructor(...args: TestPriceFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestPriceFeed> {
    return super.deploy(overrides || {}) as Promise<TestPriceFeed>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestPriceFeed {
    return super.attach(address) as TestPriceFeed;
  }
  override connect(signer: Signer): TestPriceFeed__factory {
    return super.connect(signer) as TestPriceFeed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPriceFeedInterface {
    return new utils.Interface(_abi) as TestPriceFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPriceFeed {
    return new Contract(address, _abi, signerOrProvider) as TestPriceFeed;
  }
}
